This folder contains many files for use in simulating the DIGITALS system. The 
goal of this file is to help explain the purpose of each file 

1. bpsk_gen.py
  - python class used to generate different BPSK signals 
  - custom bpsk
    - allows PRN/ BOC modulation at different rates with any chosen sample rate 
  - digitals bpsk 
    - allows PRN modulation at different rates with FIXED sample rate (clk * N-generators)

2. filter_gen.py
  - python class used to generate low-pass/ high-pass / bandpass/ moving average filters 
  - filters are generated by creating sinc functions

3. sig_util.py 
  - python class used to perform general operations on signals 

4. filtered_custom_bpsk_demo.py 
  - this file utilizes items (1) and (2) above to generate a BPSK signal of chosen modulation 
    and then applies a bandpass filter to the signal through convolution
  - plotting of the original signals, generated low-pass/ high-pass/ bandpass filters is shown 

5. filtered_digitals_bpsk_demo.py 
  - this file utilized items (1) and (2) above to generate a BPSK signal in the 
    way the DIGITALS system would, and then applies a bandpass filter to the signal through convolultion
  - the filtered signal, FPGA-filtered signal and generated filters are plotted

6. down_sampled_conv_ex1.py 
  - simple example of how convolution of a signal with a kernel is acheived
    when the signal is down-sampled across multiple lanes of traffic (4 in this case)
  - the signal here is a simple sinusoid of chosen f0, length, and number of periods
  - the filter is a moving average filter of length one-period of the sinusoid 
      - this produces a low-pass filter with cutoff frequency half that chosen for f0

7. down_sampled_conv_ex2.py 
  - example of convolution of a signal with kernel is acheived when the signal 
    is down-sampled across multiple lanes of traffic (8 in this case)
  - the signal here is a simple sinusoid of chosen f0, length, and number of periods
  - the kernel is a bandpass filter of chosen f0, BW, length, and sample rate matching that of the signal 

8. digitals_down_sampled_conv_bp.py 
  - example of convolution between DIGITALS BPSK signal and a bandpass filter, where 
    the signal and kernel are down-sampled between 8 lanes of traffic.  

9. digitals_down_sampled_conv_ma.py 
  - example of convolution between DIGITALS BPSK signal and a low-pass moving-average filter, where 
    the signal and kernel are down-sampled between 8 lanes of traffic. 

10. split_path_conv.py 
  - Another technique of 'down-sampling' the data stream across several lanes of traffic. In this
    technique, all '4' samples go to a single data stream and the data is cycled between one data stream
    at a time. This technique does not work in hardware, compared to the one used in (6) (7) (8) and (9).

11. fft_based_FIR_demo.py 
  - using FFT for filtering instead of convolution. signal strea is still 'down-sampled' into 8 paths, 
    and filterd seperately before being recombined

12. gps.py 
  - generates gps gold codes 

13. tone_gen.py 
  - generates sinusoidal waveform samples for use in loading a LUT 